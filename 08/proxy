#!/usr/bin/env ruby

require 'webrick'
require 'webrick/httpproxy'

if ARGV.empty?
  puts "Usage: ./proxy blacklist.txt"
  exit
end

$blacklist = File.readlines(ARGV.first).map(&:chomp)

def handle_request(req, res)
  domain = if req.request_uri
             req.request_uri.host
           else
             req.unparsed_uri
           end

  forbidden = $blacklist.any? { |rgx| domain.match?(Regexp.new(rgx)) }

  if forbidden
    puts "- -> Content blocked for \"#{req.request_line}\""
    res.body = ""
    res.status = 451
  end
end

class CachingProxy < WEBrick::HTTPProxyServer
  def proxy_service(req, res)
    puts 'GOT A REQUEST'
    require 'pry'; binding.pry
    # Proxy Authentication
    proxy_auth(req, res)

    begin
      self.send("do_#{req.request_method}", req, res)
    rescue NoMethodError
      raise HTTPStatus::MethodNotAllowed,
        "unsupported method `#{req.request_method}'."
    rescue => err
      logger.debug("#{err.class}: #{err.message}")
      raise HTTPStatus::ServiceUnavailable, err.message
    end

    # Process contents
    if handler = @config[:ProxyContentHandler]
      handler.call(req, res)
    end
  end
end

proxy = CachingProxy.new(
  Port: 8080,
  ProxyContentHandler: method(:handle_request)
)


trap 'INT'  do proxy.shutdown end
trap 'TERM' do proxy.shutdown end

proxy.start
